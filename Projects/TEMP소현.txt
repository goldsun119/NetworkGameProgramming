m_IngameImageMap.insert(pair<std::string, std::vector<MyImage>>("IngameHPImage", *MYRENDERMANAGER->FindCImage("IngameHPImage")));
for (int i = 0; i < m_pPlayer->GetHp(); ++i)
		{
			m_PlayerLifeImg.Draw(memDC, WndX*i, 0, m_IngameImageMap["IngameHPImage"].begin()->GetWidth(), m_IngameImageMap["IngameHPImage"].begin()->GetHeight());
		}

·»¸Å
	AddRenderObject((TCHAR*)"image/PlayerLife.png", "IngameHPImage");

¸Þ´º
//¹öÆ° È®ÀÎ

	if (INPUTMANAGER->CheckButton(240, 400, 50, 50))
	{
		/*FRAMEWORK->SetClientReadyInfo();
		PostQuitMessage(0);*/
	}
ÀÎÇ²
bool CheckButton(float x, float y, int sizeX, int sizeY);
bool CInputManager::CheckButton(float x, float y, int sizeX, int sizeY)
{
	POINT mousePos = INPUTMANAGER->GetPos();
	if (mousePos.x < x + sizeX && mousePos.x > x && mousePos.y < y + sizeY && mousePos.y > y)
		return true;
	else
		return false;
}

°×¿À¹ö
if (INPUTMANAGER->CheckButton(130, 460, 400, 40))
	{
		SCENEMANAGER->SetScene(E_MENU);
	}
	if (INPUTMANAGER->CheckButton(120, 460, 520, 40))
	{
		PostQuitMessage(0);
	}